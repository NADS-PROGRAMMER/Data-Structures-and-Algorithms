import java.util.Hashtable;
/**
 * @Members
 * Opo, Lenard G.
 * Pornelosa, Alyana G.
 * Suelo, RC Khaye B.
 * Marcelo, Adrian Nads L. */
public class DisjointSet {
    
    /**
     * NOTE
     * @Representative - parent root. */

    // A hash table for to map all values, and for easy look ups.
    private Hashtable<Integer, Node> table = new Hashtable<>();

    // Create new set on the hashtable
    public void makeSet(Node newNode) {

        table.put(newNode.getData(), newNode);
    }

    /** Checks the set if it is contains the number
     * @param number
     * - number to look up if it is present in the set. */
    public boolean contains(int number) {

        return table.containsKey(number);
    }

    /**
     * Finds the representative of the given value
     * @param number
     * - number that we want to find the representative.
     * @return
     * - returns the TreeNode */
    public Node find(int number) {
        
        // Get the node in  the hash table.
        Node root = table.get(number);

        /** The loop will stop if the current root's parent is equal to itself.
         * Meaning, if the node is have a cycle. */
        while (root.getParent() != root)
            root = root.getParent();
        /** This is the path compression, we point the root that we are finding
         * directly to its representative node to prevent the tree to grow longer */
        table.get(number).setParent(root);

        return root;
    }

    public void union (int x, int y) {

        Node rootForX = find(x); // Find the representative of the first value.
        Node rootForY = find(y); // Find the representative of the second value.

        /** Union by rank.
         * We compare the number of nodes so that the node that have less
         * number of nodes will point to the higher node */

        if (rootForX.getNumberOfNodes() > rootForY.getNumberOfNodes()) {

            rootForX.setParent(rootForY);
            rootForY.addNumberOfNodes(); // Increment the number of nodes.
        }
        else {

            rootForY.setParent(rootForX);
            rootForX.addNumberOfNodes(); // Increment the number of nodes
        }
    }    
}
